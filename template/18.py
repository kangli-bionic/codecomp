import sys, os, getpass
import heapq as hq
import math, random, functools, itertools
from collections import Counter, defaultdict, deque
input = sys.stdin.readline

# available on Google, AtCoder Python3
# not available on Codeforces
# import numpy as np
# import scipy

# if testing locally, print to terminal with a different color
OFFLINE_TEST = getpass.getuser() == "hkmac"
def log(*args):  
    if OFFLINE_TEST:
        print('\033[36m', *args, '\033[0m', file=sys.stderr)


def calc(exp):
    log("\n"*10)
    log(exp)
    exp = exp.replace("(", " ( ").replace(")", " ) ")
    exp = exp.replace("  ", " ")
    tokens = exp.split()

# We will iterate over the characters of the expression from left to right. 
# If the current character is a digit, 
#   then we put the value of this number on the stack. 

# If the current character is an opening parenthesis, 
#   then we put it on the stack. 

# If the current character is a closing parenthesis, 
#   the we execute all operators on the stack until we reach the opening bracket 
#   (in other words we perform all operations inside the parenthesis). 

# Finally if the current character is an operator, 
#   then while the top of the stack has an operator with the same or higher priority, 
#   we will execute this operation, and put the new operation on the stack.

    nums = []
    ops = []

    for tok in tokens:
        if tok in "+-*()":
            ops.append(tok)
        else:
            nums.append(int(tok))
    
        log(nums)
        log(ops)

        while ops and ops[-1] == ")":
            ops.pop()
            curnums = [nums.pop()]
            curops = []
            while ops[-1] != "(":
                curnums.append(nums.pop())
                curops.append(ops.pop())
            ops.pop()

            curnums = curnums[::-1]
            curops = curops[::-1]


            cur = curnums[0]
            newnums = []
            log(cur, *zip(curnums[1:],curops))

            for num,op in zip(curnums[1:],curops):
                if op == "+":
                    cur += num
                if op == "*":
                    newnums.append(cur)
                    cur = num
            newnums.append(cur)
            
            pdt = 1
            for num in newnums:
                pdt = pdt*num
            nums.append(pdt)

    log(nums)
    return nums[-1]


def solve_(inp):
    res = 0
    for inpp in inp:
        inpp = "(" + inpp + ")"
        res += calc(inpp)

    return res


def solve(*args):
    # screen input
    if OFFLINE_TEST:
        log("----- solving ------")
        log(*args)
        log("----- ------- ------")
    return solve_(*args)


def read_matrix(rows):
    return [list(map(int,input().split())) for _ in range(rows)]

def read_strings(rows):
    return [input().strip() for _ in range(rows)]



def process(string_input):
    string_input = string_input.strip()
    return [x for x in string_input.split("\n")]



sample_input="""
1 + 2 * 3 + 4 * 5 + 6
1 + (2 * 3) + (4 * (5 + 6))
2 * 3 + (4 * 5)
5 + (8 * 3 + 9 + 3 * 4 * 3)
5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))
((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2
"""

sample_input = sample_input.strip()
sample_input = process(sample_input)

sample_res = solve(sample_input)
# print(sample_res)


test_input="""
(7 * 7 + (2 + 5 * 7 * 8 + 2) + 4 + 2) * 5 * ((9 * 3 * 9 + 8 + 3) + (9 + 4 + 7 + 8) * (2 + 5))
((7 * 7 * 9 * 5 + 5) + 9 * (9 + 7 + 9 + 5 * 9 + 6)) * 7 + 8 * 6 + 4 * 4
6 * (9 + 8 + 6 * 8 + (3 * 2 + 4)) + 4
(7 * 5) + 4 + 7
3 * (6 * 8 + 5 + (8 * 9 * 3 + 7 * 4) + 8) * 3 + 2 * 5
(4 * 3 * (7 * 2 + 2 + 6 + 5) * 4 + 8) + 9 * (3 + 2 + (5 * 2)) * (2 + (2 * 9 * 3) * 5 * (7 * 5 + 6 * 2 * 7) + 5 + 5)
4 + (6 * 7 * (5 * 7) * 4) * 2 + (4 + 8 * 5) + ((5 * 7 * 4 * 7) + 3 * 5 + (6 + 9 + 3 + 2) + 2 * 5) * 7
2 + 4 + ((4 * 4 + 3 + 7 * 4) + 4 + (2 * 5 + 9) + 8 + 4 + 7) + 5 * 5 + 9
7 * (7 * 3 + 2 * 9 + 7 + 7) * 3 * 4
8 + 4 + 3 + 9 + 8
2 + 2 + 6 * (5 + 9 * 3 * 7) * 6
(3 * 9 * 4 + 2 * 6) * 8
8 + 6 * 4 + (7 + 7 + 8 + 9) * ((2 + 3 + 7 + 6 * 3) + 6 * 6)
7 + 9 * 3 * 9
((9 + 6) + 7 + 6) + (2 + 5 * 3 * 2 * 7)
(8 * 7 + 6 * 6 * 7 + 3) + 5
9 * (8 + 3) * 9 + (4 + 8 * (3 + 9 + 5)) * 9
9 + (5 * 2 * 4 + 3) * 3 + 6
(3 + 7 + 2 + 3) * 3
3 * (7 + 3 * 8 * 9 * (5 * 7 * 7 * 5 * 9 * 2) + (3 + 2)) * 7 + (8 + (6 + 9 + 6 * 7)) * 7 + 3
(8 * 3 * (2 * 2 + 9 * 2) + 3 + 8) + 8
3 + 5 + (6 * 6) + 8 * ((7 + 9 + 5 * 7 + 3 + 9) * 6 * 4 + (3 + 8 * 6 + 6 + 7 * 5) + 9) + 2
(3 * 7 + 3) + 3 * (5 + 7 * 5 * 2) + 6 + (9 + 9) * (5 + (9 * 6 + 7 + 5 * 2) + 5)
(7 + 9 * 2 + 3) * 5 * 8 * 8
7 + 6 * 7 + 2 * ((9 + 2 + 3) + 2 + 2 + 3 + 4)
((3 * 4 * 8 + 4 + 5 * 9) + 2 * 2) * 3
5 * 4 + 3 + (5 * (6 * 2 + 8) + (4 + 5 + 3 + 2 * 3 * 3) * (7 + 3 + 4 + 4) * 9) + 7
9 * (2 * (2 * 7 + 2 * 9 + 4) + 6)
4 + (2 + (5 + 6 + 7 + 7 + 9 * 9) * 2 * 4) + (8 + 7 + 4 * 7) * 7 * 5
9 * (4 * 3 * 6 + 2)
9 * 8 + 4 * 9 + (4 + 7 + 7 + 6 * 2 + 3)
5 * (9 * 2 + 8) + 8
5 + (8 * 2 + 5 * 9) + 9 * 8 * 2 * 5
5 + 2 * 4 + 4
(6 * 8 * 9 + 2) + 7 + 5 + 4 * 4 * 8
(8 * 4 * 2 + 5 * 5 * (9 + 8 + 7 + 9)) + (9 * 9 * 3 + (4 + 7) + 6) + (8 + 2 + 8 * 5 * (3 * 8)) * 6 + 2 + 9
4 + (8 + 3 + 6 + 3) + 8 + 9 * 2
(3 * 4 * 2 * 2) + 8 + 7 + 5 + 5
5 + (8 * 3 * 6 * (6 + 3 * 8 * 4) * 6) + ((4 * 3 * 7) + 6 + 2 + (2 * 5 * 3 * 8) + (2 + 9 * 5 + 2) + 6) * ((3 + 7) + 5 * 4) + 6 * 2
(8 * 4 + 8 + 7 + (6 * 7 * 5 + 4)) + 7 * 8 + 4 + 4 * 6
2 * 5 + (6 + 6 + 5 * (2 * 9 + 8 * 4)) + (5 * 2) * 2
(8 * 4) * 5 + (7 * 8 * 5 + 6 * 6)
7 + 4 + 7 * 8 * (7 * (8 + 5 * 5 + 3 * 7) * 4 * (2 * 2 + 4 * 3)) * 2
4 + 2 * 6 * (7 * 7 + 4 * 9 + 2) * 5
4 * 5 + 9 * (7 + 6 + 6)
(8 * 7 * 7 + 3) + (9 + 3 + 9) * 6 + 4
2 * (3 + 4 + (3 + 5 * 3) * 4) * 3 + 4 * (3 * 3 + 3 + 9 + (6 * 9 + 6 + 2 + 8 * 5) + 4)
(8 * 7) * (3 + 2 * 4 * 6 * 8 * 6) * 4 + (8 * 3 + 3 + 6) * 2
7 * 7 * 4 + 4 * (2 * (4 * 4) + 7 * 5 + (8 + 5 * 3 * 7 * 8 * 9))
8 * (9 * 6 + 3)
4 + (9 + 4 + 4 * 8 + 2) * 2 + 2 * 8 + 2
(6 + 5 + 3 + (6 * 5 + 4 + 3 * 8 * 2) + 7) + 5
((2 * 4 * 5 * 2 * 3) + 7 + 6 * 4 + 6) + 4 * (3 + (6 + 3 + 6 * 5 * 6 * 2) * 5 + (3 * 4 * 2 * 9 + 5 * 9) + (3 * 6 * 6 + 4) * 2) + 4 * 7
9 * ((6 * 9 * 4) + 9 * (6 * 9 * 4 * 5 * 8 * 3) + 7 + 4) * (3 * 8 + 7 * 6 * (7 + 2 + 9 + 3 * 8 + 6)) * 9
8 * 8 + 7 + ((6 + 5 + 5 + 9) + 4 + 3 * (7 + 5 + 8) * 4) * 2 * (4 + (5 + 6) + 7)
(4 * 8 * 9) + ((3 * 9 + 8) * 5 + 6 + 9) * 4 * 4
5 * 2 + 6 + ((9 * 9 + 2) + (5 * 3 + 2 * 3)) + 6
(6 + 6) * 2 + 4 * 8
((7 * 5 * 6 + 2) + (9 + 2) + 7) * 4 + 9
5 + (5 * 4 + (7 * 9 * 6 + 9) * 2 * 2)
8 * (4 * 3 + (4 + 3 * 3 + 6))
((3 * 4 + 6 * 4 + 8 * 5) + 9 * 6 + 5 + 9) + 4 + 6 + 4
9 * 7 + (8 * 4 * (4 * 8 + 9 + 3) + 9)
3 * (3 * 4 * 9 * 2 * 6 * 2)
8 + 9 * 6 * 2 * (3 * 3 * 3 + 5 + 8)
8 + 9 + 6 + ((3 * 4 + 7) * 9)
(5 * (2 * 4 * 8 + 6) * 9 + 8 + (4 * 4 * 5)) * ((9 + 6) + 2) * 8 + 6 + 4 + 9
(8 + 7) + 7 + (3 * 6) + 6 + 2 + 9
(6 + 4) * 9
2 + (2 * 4 + 7 * 3 * 2) * 7
9 + 5 + ((6 + 7 + 5 * 7 + 3 + 4) + (7 * 9 * 7 + 6 * 5) * 2 + 6)
7 + (4 + (3 * 7 + 9 + 6 + 5 * 2) * (5 + 3 + 5 + 5 * 2 + 7) * 6 + (8 + 7 + 9 * 6 * 3) + 2) + 6 + 6 * (5 * 8 * 5)
2 * (9 * 9 * 8 * 8 + (3 * 3 + 3 + 7 + 2)) + ((4 * 7 * 7 + 9) * 4 + 9 + 9 + (6 + 2 + 6))
(6 + 6 * 5 * 6 * (7 * 5 * 8 + 3 * 7 + 8) * 9) * 7 + 6 + 2 + 5 * 2
2 + 5 + 2 * 5 * 3
6 + 6 + (2 + 3 + 7 * 2) * 5 * (3 + (6 * 3))
5 * 8 * 4 + (7 * 6)
((6 * 3 * 8) + 4 + 9) + 9 + 8 + (8 + 7 * 9 + 5) * 6 + 7
6 + 6 + (2 * 8 + 6 + 9 * (6 * 2 * 5 * 2 + 2 + 8) + 7) + (4 * 4 + 7 * 5 * 6 + 8) + 9 + 7
9 + 3 + ((9 + 3 * 6 + 3) + 7) + 9 + 4
9 + (8 * 9 * 6) + 6 * 6 + (6 + 7 + (3 * 4 * 3 * 7 * 3 + 9) + 3 * (3 * 2 * 6 + 2 * 4 * 3)) + 2
4 + 9
(9 + 8 * 6 + (8 * 7) + 7) * 8 * 6
7 + 5 + 7 + (3 + 6 * 4 * 8 * 8)
8 * (8 + 8) * 5 * 9 * 6 * 3
7 + 3 + (9 * 8 * 5) + 9
9 + 3 + (2 * 4 * 6 * 8 + 9)
(8 + 9 + 5 * (5 * 4)) * 6 + 3 * 4 + 7 * 3
(6 + 7) * (6 + 3)
3 * 5 + (7 * 3 * 6 + 5 + (5 + 7))
(9 * 6 + 7 + 5 + 9) + 4 * ((9 * 8 + 8) + 5 * 2 * (4 + 8 * 5) * 4) + 7 + (8 + 9) * 9
(9 + 3) + 6 + 3 + 4 * 9 * (4 + 9 * 7)
3 * 4 + 7 * 8 + (8 + 8) * (8 * 4 * 8 + 4 * 9)
4 + ((4 * 5) + 9) * 8 * 4
(6 * (2 * 2 * 3 + 9)) * 7
7 * (6 + 2) + 3 * 7 * 2
4 + 2 * 9 + (3 * (4 * 2 + 6 + 4) + (7 * 7) * 5) + 6
3 + 9 * (4 + 3 * (7 * 9 + 8)) + ((5 * 5) + (6 + 3 + 9) + (2 + 8 * 4) + (8 + 8 + 8 * 7 + 4) * 2 + 6)
3 * 9 + 5 * 8 + 7
2 + 8 * 9 * ((5 + 9 * 6 + 8 + 6) * 9 + 2 * (5 + 3 * 2 * 5))
(3 * 9 + 8 + 2 + (6 + 8 * 9 * 7 * 7 * 5) + 6) * 3 * (8 * 4) + 5 * 4 + 9
(3 * 9 * (9 * 8 * 3 * 5 * 2 + 9) * 3) + (6 * (6 + 4 * 8 * 4 + 5) * 3 * (7 + 7))
6 + 5 * ((5 * 8 + 8 * 4 + 3 + 9) + 8) + (6 + 2 * (4 * 3 * 3 + 2) + (7 * 5) + 8) + 2
((2 + 7 + 8) * 6 * 4) * 8 + 5 * 8 + (3 + 4 + 8) * 8
6 + (6 * 7 + 5) * 2 * 2 * 5
6 * 2 + ((9 * 5 + 5) + 2)
2 * (4 + (7 * 9 + 7 + 4 * 5) * 4 + (2 + 3 + 6 * 5)) + 7 + 7 * 7 + 5
(2 + 6 + 7 + (3 + 9)) + ((6 + 2 + 7) + 4)
((6 * 3 + 2 + 6) * 7 + 7 * 5 + 3 * 4) + ((5 * 6 * 7 + 9 * 2) * 6 + (2 * 7)) * ((7 + 9) + (2 * 2 + 7 + 2 * 5 * 6) * 8 + (3 * 4 * 6 * 4))
5 + 7 * (5 + 4 + 4 * (2 + 3 * 2) + 8)
8 + (6 * 4 * 9 * 4) * (3 * 3 + (7 + 6 + 6 * 5 * 4)) * 8 + 4
9 * 5 + 9 + ((3 + 9 * 2) + 4 * (6 * 8 + 8 + 8 * 4 + 6) + 4)
3 + (2 * 4 + (6 * 4 * 2 + 3 * 2) + (3 * 6 * 6 * 6) + 5) + 5 + 3 + 8 * 5
5 * (7 + 6 * (9 * 9) + 4) + (2 + (4 + 6 * 7 * 6 + 2 * 9) * 2 * 9 + 3 * 7) + 5 * 6 * 2
4 * 3
5 + 9 * ((7 + 2 + 6) * 4 * 2 + 8) + 3 + (7 * 7 + (3 + 4 * 2 + 2 + 4) + 6 * 8)
(6 * 7 * 2) * 2 + (9 + 9 + 9 + 3 + 4)
(5 + (5 * 5) * 6 + (4 * 5 + 4 * 2 * 8) + 7 + 4) * 4 * 4 * 6 * 5 * 5
4 + 9 + 8 + (7 * 8 * 7) + 3
3 + 7 + ((8 + 8 + 3 * 4 * 3) * 9 + 2)
(4 * 7 * 3 * 5 * (2 * 6)) + 7 * 6 + 8 + 4
4 * 7 * 6 * 9 * 9 * 5
8 + (5 * 9 * 3 + 8 * 2) * 9 + (6 * (2 * 4) + 9 + 3 + 3)
3 + ((3 + 4 + 8 + 4 * 9) + 9 + 8 * 9 + 8) + 2
6 + ((2 + 3) * 8 + 9 + (7 + 6 + 5 * 8)) + 8 * 8 + 8 * 4
(9 * 5 * 6 + (6 * 3 + 6 + 5 + 2 * 2) * 3 * 9) * 3 * (2 * 6) + 2 * 6 + 9
9 * 8 + 6 + 4 + (2 * 6)
(8 + 6 + 7 + 3 + 7 + (8 + 6 + 3 + 7 + 3 * 7)) * 7 * (7 + 6 * 4 * (7 + 9)) * 6 + 4
((2 * 4 * 2 * 3) + (2 * 9 * 8 + 4) * 3 + (9 + 8)) + 7
6 + (6 + 5 * (8 + 7) * (5 + 8 * 3 + 2)) + 4 + 3 * 6
6 + 4 + 3 + (7 * (2 + 3 * 8 + 4) + 8 * (2 * 3 * 9) + 3) + 8
3 + (8 * (5 * 9) * 4 + (5 + 5 * 7 * 9 + 9)) * 4 * 6
3 + ((3 * 4) + 5) * 9 * 5 + 4 * (7 * 9 * 7)
2 + 8
9 + 5 * 8 + (6 + 8 * 8 * 8 * 9 * 3)
((8 * 3) + 2) + (7 + 6)
9 * (6 + 9) + 8
8 + 3 + 4 + (4 + 9 * 3 * 7 * 9 * 4) * 9
(5 + 9 * 6 + 2) * (6 + 5)
2 * 7 + (9 * 5 * 2 * 5 * 5) * 3
6 + 4 + ((2 + 7 + 5) * (6 * 9 + 2 * 9 + 8 + 2)) + 7
9 + 7 + 8 * 7 + ((7 * 9 + 8 + 4 * 4) * 9) * 8
3 + (4 + 9 * 3 + 6) * 4
((3 + 2 * 6 * 4 * 2) * 8 + (8 * 7) + 2 * 6) + 8
((6 * 8 + 2 * 8 * 5 + 5) * 2 + 5) * (4 + 7 + 4 + 2 * 5 + 2) * 4 * (4 * 6 * 8) * 4
3 * (5 * 5 * 5 * 5) + 5 + 8 * (2 + 4)
8 + 9 * ((8 * 4 + 7 + 5) * 4) * 5
5 * (7 * 3 * 8 * 6 * 8 + 6) * 9 + 2 + (3 + (4 + 7 * 9 * 4 + 5) + 3 * 8 * (9 + 8 + 8 + 4 + 2)) + 7
5 + 9 * (4 * 7 * 7 + 7 * 5) + 8 + (4 * 3 + 3 + 2)
5 + 9 + (8 * 6) + 7 + 7 * (6 * 5 * 3 * 3 + 9 * 5)
9 + (6 * 7 * (3 * 4 + 6 + 8 * 7)) + (4 * (2 + 8 * 7 + 5 * 6 * 3)) * 3 * ((7 + 9 + 3 * 4 + 2) + 2 + (7 * 3 + 3 * 7 * 8 + 2) * 4 + 5) * 4
2 + 7 * (2 + 2) * 2
(2 + 3 + 8 + 2) + 3 + 8 * (8 + 5 + 9 + 6 + 8 * 2)
2 * (8 * 5 + 7 + 7 * 3) + 9 + 9
3 * (6 * 3 + 5 + 2 * (2 + 2) + 6) * (8 + (7 + 9 * 4) + 7 + 6) + 6 * 2 * 3
7 + 4 * (4 + 2 * (8 + 6 * 7 + 3) * 5 * 8) + (8 * 8)
(3 * 5) + ((9 + 8 + 2 + 4 * 8 + 2) * 6 * 3 + 5 + 8 + 4) + 5
2 + 6 * (7 + 3 * 9 * 7 * 7 + 8) + 9 + 3 + 8
((2 + 9 + 6 * 5 * 3) + 9 + (2 + 3 + 3)) + (4 * 6 + 9)
(7 + 6) * (7 * 9 + (8 * 3 + 4 + 7) * 2 * 5) + 7 * (4 * 7 * 9 + 2 * 6 * 4) + 9
(2 * 6) * 3 * 7 * ((3 + 9) * 9 + (4 * 4 * 6 * 5)) * 4
7 * 6 * 5 * 8 + (9 * 4 + 4 + 5)
(6 + 7 + 4 * 8 * (6 * 4 * 4 * 8 + 7 * 5)) + 3 + 5 * 5
9 + 9 * 3
5 + 4 * 5 * 4 * (6 * (7 + 5) + 7 + (8 * 7 + 3 * 5 * 2 + 2) * 7) * 9
4 + ((7 + 8 * 8 + 2) + (2 + 4 * 8) + (7 + 9 * 4 * 2) * 2 + 7)
4 * 5 + 9 * (7 + 2) + 8
((5 * 5 * 3 + 2) + 5 + 6 + (7 * 5 + 7 * 4 * 6 * 6) + 4 + 5) * 5 + (4 + 8 * (8 + 3 * 6 + 7) + 4 * (4 + 6 + 4 * 8 + 7 * 7)) * (9 + 2)
(9 * 5 * 7 * (8 * 3 * 6 * 4 + 6) + 8) + (7 * 8) * 2 * (7 + 7 + 5 + 3) * 6
4 * (3 + 6 * 4 + 6 + 3)
(3 * 7 + 5) + 2 * 2 * 6 * 8
7 * (2 + 4 + 3 * 9 * 8) + 3 * (5 * 9) * 5 + 7
5 * 7 * 8
2 * 3 + (6 + 8 * 9) + 5 + 6
(9 + 8 * 8) * ((9 + 9 + 8 + 9 + 7) + 3 + (3 * 6 * 3 + 9 + 8) + 7)
((2 + 8 + 9) * 3 + 8 * 2) + 8 + 4 * 2
(9 + 6 * 6) * 7 * 8 + ((7 + 9 * 4 * 4) + 8 + 5 * 5)
5 + 3 + 3 * 2 + (8 + 8 * 3 + (8 * 6)) * 4
8 + 8 * ((8 + 4) + 2 * 7 * 9) * 5
(3 + 3 + (4 * 3 * 4 + 6) + 4 * 3 * 4) + 7 * 4 + 4
5 + (5 + (9 * 5 + 5) * 9 * (6 * 9)) + 2 + (9 + 8 * (2 + 3 * 8 + 2 * 7) + 7 + 7 + 2)
7 + 3 + (6 * 6 * 6)
(3 * 4 * 6 * 4 + 5 * 8) * 2 * 5 * 6 + (5 + 3 + (3 + 2)) + (6 * (4 + 3 + 7 + 8) + 4 + 3)
(3 * 2 * (4 + 6 * 4) * (3 + 2 + 6 + 5)) + 9
8 * 3 * 6 + 3 + 5 + (9 * 3 * 3 + 2 * (5 * 2 + 8 * 9))
((7 + 9 + 5 * 2) + (2 * 6 * 8 * 3 + 6) + 2 * (9 + 3 * 5 * 9 * 5 * 2) + 9) + 4 * 6
(6 * 7) * (8 + 6 + (7 * 3 + 2)) * 7 + 6
3 + 7 + (5 * 5) + 5 * 6
3 * 4 * 3 + 8 * 3 + 9
(8 * (3 + 9 * 6) * 3 * 6 * (5 * 2)) + 2 * 9 * 4
2 * 6 + (9 * 7 + 9) * (8 + 5 * 8 + 7 * (5 + 3 * 5 * 4 * 4))
(8 * 7 * 8 * 3 + 9 * 2) + 6 * (3 * 7 * 2)
5 + 2 + ((2 + 3 * 3 + 7 + 7 + 9) * (6 * 4 + 4 + 3) + (6 * 6 + 8 * 2 * 9 + 9) * 4)
(9 + 4 + 9) + 7
2 * (9 * (3 * 7) + 9 + 7 + 2)
(8 + 2 + 9 + (7 * 2 + 9 * 8 * 9 * 6)) + 7 + 8 + 8 * 6 + (7 + (4 * 9 + 5 + 4 + 7) + (3 * 9 + 7 * 7 * 7 * 7) + 6)
((4 + 2 * 2 * 7 * 6 + 8) + 4 * 7) * (4 * 5 * 3) * (7 * 9 + 2 + 7 * 6 + (7 * 9 * 5)) * 2 + 5
6 * (5 * 6 + 4) + 7 * 6 + 6 * 5
7 + 6 + 8 * (5 * (7 * 2 * 9) * 2 + (8 + 9 * 5)) * 9
7 + 2
6 * (6 * 8) + 4 + (3 * 7 + 7 + 6 * 7 * 3) + 9
((6 * 4 * 2) * 7 * 4 * 2) * 7 + 6
2 * 4 + (7 * 9 + 2 * (9 + 9) + 2) * 8 * 9
6 + 5 + (2 + 5 * 5 + 9 * (9 * 5 + 8 * 7 * 8) + 3) * (3 * (2 + 3 + 7 + 2 + 6 * 6)) * 4 * 5
(8 * 4 * 8 * 5 + 7) * (3 + 9 * (9 + 9 + 9 * 8) * 9 * 8 + 2)
4 * 3 + 3 + 9 * (3 + 9 + 7) + 5
3 + (7 * 3 + (5 + 3 * 9)) + (4 + 4 + 2 * 7) * (6 + 2 * 2 + 7 * 6 + 8)
4 * (4 * 8 * 8 + 8) + ((8 * 6) + 3 + 4 + 8 + (8 + 5 + 8 * 3 + 7) * (8 * 2 + 2)) * 2 * 8 + 5
2 * 2 + 5 * 7 * ((4 + 5 * 5) + 4 * 6 + (3 + 4 * 3 + 2 + 4))
(9 + 4) * 6 * 6 * (3 * (4 + 8 * 7 + 4) * 2 + 5 * 8 * 8) * (2 * 6 + (7 + 7 + 9 * 9 * 5) * 2)
9 + 9 * 5 + 3 + (8 + 9 + 4 + 5) + 9
(4 * 4 + (8 * 4 * 7 * 7 + 7)) + 7
3 * 4 * 8 * ((3 + 2 * 2 * 7 * 2) * 7 + (7 + 2 + 6 * 9 + 4 + 2) + 9 + 5 * 4)
(8 * (4 + 4 + 4 * 3) * (4 + 9 * 9 + 5) + 8 * 8 * 8) * (5 * 4) + 7
(4 + 6 + 2) * 2 + 2
9 + ((5 * 3 * 9) * 8 + 9) + 5
3 * 2 * (2 + 5 * (2 * 5 * 3) + 3) + (5 + 9 + 8) * 5 * 7
((4 * 4 + 8 * 4 * 5 * 5) + 3 + 3 + 5) + 8 * 3 + 3 + 9
2 + ((4 + 9 * 2 * 8 * 4 * 4) * 9 + 2 + (6 * 3 + 9) + 8 + 3) + 9 + 2 * 5 + (9 * (6 * 7 * 7))
2 * (9 + 4 * (7 + 3 + 3 + 4 * 6 * 5)) + 8 + 9
(6 * 9 * 3 + 8 * 9) + 9 * 5
6 * (8 + (8 + 3 + 9 * 4) + 6) * 2 * 9 + 6 * 7
(8 + 6) + 8 * (9 * 2 * 2) + (4 * (3 + 3 * 5 * 9) + 3 * 4 * 7) + 3 + 5
4 * (3 * (7 + 4 * 7) + 2 * 9 + 4 * (4 + 3 + 9 + 3)) + 2 + 3 * 9
2 + ((5 + 9) * (6 * 8 + 6 * 8 + 9) + 3)
((4 * 7 + 8 + 5 * 9 + 6) * 2 * (3 + 9 * 8 * 8) + (8 * 6 + 2 * 9) + 4 + (9 + 8)) + 5 + 6 * ((4 + 2 + 8 * 5 * 2 + 5) + 4 * 8) * 5 + 8
2 + (8 * 9 * 7) + 5 + 6 + 8 * (9 + 4 + 9)
(8 + (9 + 5 * 5 * 5 + 9 + 7) + (7 + 4 * 3 * 9 + 6)) + 4 * 5
6 * (2 * 2) * (2 * (6 + 4) * 2 * 6 + (4 + 2 * 8 + 4 + 2 * 7) + 4) + (8 * 2 + 8 * 9) + 6
7 * 5 * ((2 + 3 * 8 * 8 + 9) * 4 + 3 + 5 * 6) + 3 + 5
8 * ((5 + 4 * 6) + 6 * (7 + 5 + 7 + 4 * 9) + 2 * 9 + 2) * (7 + 2 * 6 + (4 * 3) + 8 + 9) + 8 + 5
5 * 2
4 * 5 + 8 * 3 + (3 + 9 * 3 + (3 * 7 + 4 * 3 + 3 + 5) * 9 * 6) + 3
(8 + 7 + 3) * 4 + 7 * ((8 * 9 + 5) * 3 * 6 * 6 + 5) + 4 * 6
2 * 7 * 3 * (3 + 3 * 5 + (2 + 6) * 3) + ((5 * 5) * 9 * 9 + 8) + 4
6 + 7 * (4 * (6 + 2 + 7 + 7 + 2) * 9 * (3 + 3 + 9 + 4 * 7 * 8)) * 4 * (3 + (8 * 5 + 2 * 7) + 4 + 7 * (7 + 3 * 3) + 5) + 6
((8 * 5 * 6 + 4 * 9) + 6 + 2 + 5) * 7 + (4 * 8 * 6 * 7 + (7 * 3 * 3 * 8 + 6) * 7) * 5 + 9 + (3 * 5 * 9 + 2 + (5 + 9 * 6) + (4 + 3 * 8 + 6 * 3 + 3))
9 + 9 * 8 + (2 * 8 + 2 * 2) + 2 * (9 * 9 * 8 + 7)
4 + 3 + 7 * ((8 + 3) * 3 * 8 + 8)
9 * 9 + 8 + (5 * 3) * ((3 * 8 * 5) * 4)
5 * 7 * 5 * ((3 + 5 * 4 * 7 + 6 * 6) * 6 + 5) * 6 * 8
6 + 2 * 9 + 6 * 2 * ((5 * 5 * 8 * 7 + 2 * 5) * 3 * 6 + 2 * (4 + 7) + (4 * 6 * 7 + 7))
(7 * 6 + (8 + 6 * 9)) + 2
6 + (3 + 2 * 2 + (9 * 8 * 7 * 7 + 2)) * 9
3 + (7 + (9 + 4 * 4) * 8 * 9)
((7 + 4 + 9) * (2 * 7 + 7 + 7 + 8) + (2 * 2 * 2 * 9)) + 9 * 6 * 2
8 + 3 * ((4 * 8 * 5 * 5) + (8 * 9 * 8 + 7 * 9)) + (4 * 7) + 3 * 4
3 * (7 * (6 + 3 + 9) * 3 + (4 * 3 + 8) * 9) + 3 + (4 + 2)
((6 * 6 + 3) * 7 + 4 + 2 + 5 + 8) * 8 + (2 + 4) + 7 + 3
(5 * 5 + 4 * 9 + 2) * 3 + 9 + 8 * 7 + 8
(2 * 9 * (2 + 3)) + (3 * 2 + 2 + 6) + 5 * 2 * (4 + 9 * 7)
9 * 7 * (4 * 5 + (5 + 3 * 7 + 5 + 8 * 5))
(3 + 6 * 9 * (3 + 2 * 4 + 2 + 3)) + (5 + (8 * 4) * 7) * 5
2 + 6 * (6 + 8 + (6 + 8 + 8 * 4 + 3 * 5) * 3 * 5)
5 + 8 * (8 + 4 * (2 * 4) * 9 + 8)
7 * (3 * (7 + 8 * 4 * 5 * 4 + 3) + 4 * 6 * 8 * 6) + 4
4 * 6 + 4 * 8 + (2 + (7 + 4) + 4 * 5 * (5 + 7) + (3 + 2))
8 * 2 * (2 + 7)
8 * 2 * ((9 * 9 * 4) * 4 + 5 * 9 + (9 * 5 * 9 * 5)) + 3 + 6
(6 + 2 * 5 + (4 + 2 * 7 * 4) + 6 + 2) + ((5 + 5 + 8 + 3 * 2 * 8) + 7 * 5 * 3 + 4) * 3 * 8 * (4 * 2 + 5 + 4) * 2
5 * 6 + 3 + 4
4 + (3 * (3 * 3 * 8 + 8 + 7))
6 * 7 + 2 + 2 + 2 * (7 + 6 + 2 + 8 * 9 + 2)
(5 + 7 + 5 * (7 + 4) * (2 * 8 + 9 + 8 + 4 + 2) * 4) + 5 * ((3 * 5) + 3) * 3
8 + 2 + 5 + 8 + ((5 + 8) + 7) * 2
5 * 9 + (6 * (3 + 9 + 3 + 7 * 5 * 2) * 4 + 2 + 3) * 8
2 * 2 + (9 + 6 * 5 * 6 * 3) + (6 * 2 * 9)
8 * 2 + 3 * 7
4 + 6 * 5 + 8 * 7 + 6
(2 + 9 * 4 * 9) + 4 * 5 + (3 + 7 * 3 * 6) * ((7 * 9 * 6) + 4 + 8 + 7 + 3) * 6
4 * 8 + (5 + (8 + 7 + 2 + 6 * 4) + 9) + 2 + 5
((3 + 6) * (8 * 3 * 4 + 4 + 2 * 6) + 5 + 8) + (5 * 7 + (7 + 8 + 8))
3 + 8 * 3 + 7 + 4 * 6
8 + (8 * 6) * 7 + 7
((3 * 3 + 4 * 5) * 2 + 3) * 7 + (9 * 8 * 2 * 4 * 5) * 7 * 5 * 3
3 + 9 + (6 * 9 * 2 * 7) * 3 * (9 + 6 + 2 + 8 + 7 * 7) * 5
5 * 9 * (8 + 7 + (7 * 2 * 2) + (4 + 2 * 5 + 7)) + 6 + 9 + 9
(8 * (7 + 2 + 9 + 8) * 6) * (4 * 6 + 4 * 4 + (2 * 6 + 9 + 7 * 5)) + 5 * (3 * 7 + 2 * (4 + 5 * 5 + 8 * 2 * 9)) * 6 + 9
8 + 7 + ((6 * 3) + 6 + 5 * 4 + 7) + 7 + (3 + 7 + 2) + (2 * (5 * 9 * 2 * 6 + 9 + 2) * 2)
(4 + 7 + 5 + 9 + 7) + 2 * 7 + 3 + 6 * (8 + 4 + 6 * (7 * 6 * 5 * 6))
(8 * 9 + 3) * 9 * 6 * (5 * 6)
9 + 8 * 9 * 2 + 8 + 7
(5 * (4 + 5) * (8 + 8 * 8) * (6 + 6 * 4 * 7)) * 9 * (7 + 5) + 2 * 6
9 + (6 + 3) * (5 * 8 * 3 + (4 * 2 * 7 * 6) + 2 + 9)
8 * (3 * 8 + 6 * 4 * 9 * 2) + 8
5 + 9 * (5 * 9 + 5 + 8) * 7 + (6 * 7 + 2 * 5) * 4
2 + ((4 * 6 + 5 + 6 * 9) * 3 * 8 + (5 * 6 + 5 + 8) + 8 + 7)
(7 + 3 + (8 + 2 * 2 * 6) * 3 + 7 + 5) * 8 * 7 * (2 * 8 + (8 * 8) + 9)
9 + (8 + 6 + (2 * 8 * 9 * 8 + 2) * 7 * 2 * (7 + 7))
2 * 2 + 8 * 9 * (9 * 9 * 3 * 2 * 3 + (9 + 9 + 9 * 6 * 3)) * (9 + 8 + 9)
(2 * 4 * 8 * 7) * 7 + 8 * 4 * (8 + 6 * (7 + 2 * 5 * 4 + 9) + 4)
2 * (3 * 4) * 5 * 7 + 7 + (5 + 3 + 8 * 3 * 2 + 3)
9 + 6 + (3 * (5 * 9 + 2) * 6 * (3 * 5 + 9)) * 6
5 * 2 + ((5 + 7 * 5 + 2) + 6 + 7 * (3 * 3 + 6 * 6) + 7 * 7)
7 * 5 + 3 * 5
2 * 7 * 8 + 7 * (2 * 4 * (6 * 6 + 9 * 2 + 3))
(4 + (4 + 9 * 6 + 9 * 2 + 2) + (9 * 6 + 6 + 4 + 6)) * (3 + 9) * 8 + 2 + 8
2 + 5 + 3 * 4 * 4 * (5 * 4 * 5)
((2 * 9 * 6) * 5 * 9 * 2 * 9) + 9 + 5
3 + 3 + 4 + 8 + 3
2 + (8 * 2 + 7 + (4 + 4 + 5 + 6 + 2 * 9) + 3 * 7) + 4
(2 * (3 * 4 * 4 + 4) + 6 * 3) + 5 + 3 * (3 + 6 + (2 + 4 * 9) * 6 + 2) + 7 * (8 * 6 + 5 * 3)
6 * 4 + (4 * (3 + 9 + 2) + (3 * 2 * 3 + 2 * 9 * 4) * 2 * 2 + 9) * 8 + 4 * 9
((2 + 9 * 6) + 9 * 3 + (6 + 7) * 6) + (6 * 7 + 5) * 2 + 2 + 8 + 9
9 * 8 + 2 * 4 * ((2 + 7 + 3) + (2 + 7 * 2) * 3) * 8
2 + 2 * 2 * 3 * (5 * 3 * 8 * 3 * (4 + 8 * 8) + 5)
(6 + 5 * 5) + 8 * 5 + 8
4 + 2 + 4 * 4 * 5 + ((5 * 7 + 7) * 6 + 2 * (3 * 3 * 3 + 7) + 6 + 7)
2 + 4 * 3
9 + 9 + (4 * (9 * 3 * 8 + 8 + 8 * 5) * 4 * 3 + 9 * (7 + 3 * 9 + 5 * 7 * 3)) * 6 + 2
(4 + 2 + 6 + 9 + 3 * 8) * 4 + (9 + 7 * 6 * 8 + 5 * 2) * 2 + 7 * (4 * 4)
(2 + 2) * (3 * 2 + 5 + 2 + 6) * 9
9 + 4 + 6 * 6 + 6 * (4 * (5 * 7 + 2 + 7 + 9) * 7 + 4 * (4 * 7 + 9 + 5))
9 * 8 + 4 * 2 + (2 * 5 * 8 * (3 * 5 + 9 + 3 * 3)) * 3
(3 + 9) + 4 + 6 * 3 * (9 * 7 * 3 + 4 + (9 * 4) + 3) * (5 + 6 + 6)
7 * 8 + 6 + (4 * 8 * 7 * 7 * (8 + 3 * 5 + 9 * 7 + 5)) * 4
7 * ((7 + 7 * 9 + 8 * 8 + 2) + 6 + (2 * 7 + 9)) + 6 * 6 * 6
(7 + 3 * 9 * (8 + 4 * 8 * 9 * 7 * 9)) + (9 * (8 + 7 * 4 * 2 * 7 * 2) * 9 * 5) + (8 * 5 + 8 + (8 + 6)) + ((5 * 5 + 2) * 7)
8 * 3 + 3 + 7 * (3 * 5 * (3 * 3)) * (4 * 3)
9 + 8 * 2 + 6 + ((7 * 2 * 3) * 6 + 7 * (6 * 7) + 6) + 3
(2 * 2 * (9 * 4 * 9 + 7 * 4 * 6) + 8 * 9 + 6) * 4 + 4 + 8 * (6 * (9 + 7 * 5 + 5 * 3) + 8 * (8 * 6)) * (3 + 5 * 7 + 2 + 3)
3 + ((4 + 9 + 5 + 8 + 9 + 3) + 6)
5 + 3 * ((2 * 3) * 3 * 7 * 6)
6 * ((4 + 9 * 4) * (6 * 8 * 3 * 7 + 4) * 2 + 9 + 5 + 5) * 7 + (3 + 9 * 7 + 9) + (3 * (5 * 9 + 8) * 7 + 7 + 6)
(9 + 9 + (7 * 2 * 2 + 8 + 9) * (3 * 4) * 6) + 4
4 * 6 + 4 + 2 * 3 + (8 * 6 * 5 + 3)
3 * ((6 * 9 + 4 * 7) + 8 + 8 + 7 * (7 + 5 * 6 + 3 * 6 * 2)) * (9 + (5 * 8) * 6 * (8 * 2 * 2 + 2) * (2 + 5 * 4 + 4))
8 * 6 * 6 + 8 * (8 + (6 * 4 + 7 + 3 + 5 + 2) + 9 + 4)
(8 * (5 + 2 * 9 * 3 + 6) + 2 * 3 + 3 * 4) + 8 * (9 * 3 + (3 + 7) * 6 + 6 * 8) * 4
9 + 5 + (8 + (8 + 2 + 4 + 6 * 8 * 7) * (9 + 4 * 6 * 4 + 6) * 7 + 3 + 7) + 4 + (3 + 5)
5 + (9 + 9 * (4 + 7 + 2 + 9 * 7 * 6) + 3 * 9) + (9 * 4 + 3 * (4 * 9 + 4 * 3 * 4 + 2)) * (9 + 7 + 7 * 8 * 4) + 9 + ((7 + 2 * 5 + 5 + 8) * 2 * (6 + 9 * 3 + 9))
5 + ((3 * 7 * 4 * 5 * 6) + 3 + 8 + 5 + 6) * 8 + 9
8 + 5 + 9 * 8 * 8
4 + (9 * (4 + 8 + 9 + 5) + 4 * 6 + 4 + 4) + (8 * (3 * 8 + 7 * 3 + 9)) + 4
2 + 7 * (3 * 4 + 8) * 8 * (2 + 6 + 5 + 3 + (6 + 7 + 9 * 8 * 6 + 5) + 2) + 6
(2 * (3 * 5 + 6 * 3) * 7 + (7 * 2 + 5 + 8 + 6) * 8) * ((4 + 5 * 2) + 8)
(4 * 6 + 7 + 8 + (7 + 9 + 7 + 7 * 5 * 9) + 5) * 9 + 9 + 4
6 + 3 + 4 + (7 + (8 + 6 * 3 + 6 + 7 + 2) + 5)
9 + 3 + (3 + 6 * 4 + 6) * 8
6 + 6 * (2 + 5 + 5 + (3 * 5) + (9 * 4 + 9 * 5 + 3 * 7)) + 5 + 8
4 * (8 * 8 + 8) * 9 + 4 * 8 + (8 + 5 * (4 + 8 + 4) * 3 * 9)
7 * ((7 + 7 * 9 + 5 * 2 * 2) * (2 * 4 + 7 * 3 + 8)) + 5 + (5 * 5) * (7 * 9 + (7 + 6 + 2 * 3 * 4 * 9)) + 5
6 * 4 + 3 + 9 * (9 * 2) + 7
9 + 7 * ((9 * 2 + 5 * 8 + 6) + 7)
(5 + 3 + (5 + 4 * 4 + 9)) * (6 * 5 + (6 + 6 + 7 + 9 + 3 * 8) * 8 + 2 + 3)
9 + 2 + 7
6 * (7 * (3 * 5 + 9 * 8 * 3) * 4) * 2
9 + 7 * (5 + (8 + 5))
2 * 9 + 3
(5 + (7 + 8) * (7 * 7 * 8 * 7 * 8 + 3) + (7 * 9 + 4 + 2 * 5)) + 6 + (2 * 5 + (3 + 2 * 2 + 9 + 3) + 5) * 8 + 9 + 7
(5 * 3) * (5 + 4 * 5 + 6) + 2 * (2 + 5 + 8) * 6
7 + 3 + 6 * ((3 + 3) + 8) + 5 + 7
9 * 9 + (9 * 4 * (2 * 4 + 4 + 4 * 8 + 9) + 5)
4 * 7 + 8 + (6 + (9 * 3) * 3 + 6) * 3 * 9
((3 + 9 + 6 + 6) * 9 * 2 * 3 + 3) + 9 * 2 * ((2 + 2 + 3 * 7 * 2 * 4) * 8 * (6 + 8) + 9 + 4) + 8 * 2
((4 + 8) * (7 * 3 + 2) * 9 * 9 * 5) + (5 + 4 + 7 + 4) * 6
5 * 2 + (9 + 2 + 8 + 3) + ((6 * 7 * 8 * 6 + 5 + 6) + 2 * (5 + 9 * 7 * 8 + 6))
4 + 7 + 3 + ((5 + 5 + 3 + 2 + 2 + 8) + (9 * 8 + 3 * 4 + 9 * 9))
((9 * 7 * 8 + 2 + 6 * 3) * 8 * 8 + 7) + 6 * (7 * (4 + 4 * 5 + 7 * 9) + 8 + 5) * 9 + 9 + 6
9 + 5 * 6 * 2 + (6 + 5 + (2 * 2 * 5 * 8 * 3 * 9))
8 + 3 + (4 * 8 + 7) + ((9 + 8 + 8) * 6 * 8) + (6 + 9 * 9 * 7 * (7 + 8 + 6) * 3)
2 * (7 * 3 + 8 * 6 + 8) * 8 * 6 * (4 + 5)
5 * (6 + 2 * 9) + (7 + 6) + 8 * 5
(4 * (6 + 9 + 3 + 6 + 2)) * 8 * 3 * 2
4 * 3 * (9 + 5 * 5 + (5 + 6 * 2 + 7) + 7 + 3) * 5 * 6
6 + 7 + (5 + 3 * 2 + 3 * 7 * 2)
7 + (4 + 3 * 3 * 9 * 9) + 8 + 4 + 2
((4 * 3 * 5 * 8) * 9 + 7) * 8 * 7
3 * 8 * (5 * 6) + 2 * 5 + 9
((8 + 2 * 4) * 7 + 8) * 8 * 6
(3 + 4) + 5 * 4 * 9 + 7
(7 * 4 * 3 + (5 + 6 + 2 + 4 * 7) * 5) * 5 + 2 + 8 * 6
"""

test_input = test_input.strip()

test_input = process(test_input)
test_res = solve(test_input)
print(test_res)



