import sys, os, getpass
import heapq as hq
import math, random, functools, itertools
from collections import Counter, defaultdict, deque
input = sys.stdin.readline

# available on Google, AtCoder Python3
# not available on Codeforces
# import numpy as np
# import scipy

# if testing locally, print to terminal with a different color
OFFLINE_TEST = getpass.getuser() == "hkmac"
def log(*args):  
    if OFFLINE_TEST:
        print('\033[36m', *args, '\033[0m', file=sys.stderr)

RESULT =  [4, 4, 12, 9, 24, 16, 40, 25, 60, 36, 84, 49, 112, 64, 144, 81, 180, 100, 220, 121, 264, 144, 312, 169, 364, 196, 420, 225, 480, 256, 544, 289, 612, 324, 684, 361, 760, 400, 840, 441, 924, 484, 1012, 529, 1104, 576, 1200, 625, 1300, 676, 1404, 729, 1512, 784, 1624, 841, 1740, 900, 1860, 961, 1984, 1024, 2112, 1089, 2244, 1156, 2380, 1225, 2520, 1296, 2664, 1369, 2812, 1444, 2964, 1521, 3120, 1600, 3280, 1681, 3444, 1764, 3612, 1849, 3784, 1936, 3960, 2025, 4140, 2116, 4324, 2209, 4512, 2304, 4704, 2401, 4900, 2500, 5100, 2601, 5304, 2704, 5512, 2809, 5724, 2916, 5940, 3025, 6160, 3136, 6384, 3249, 6612, 3364, 6844, 3481, 7080, 3600, 7320, 3721, 7564, 3844, 7812, 3969, 8064, 4096, 8320, 4225, 8580, 4356, 8844, 4489, 9112, 4624, 9384, 4761, 9660, 4900, 9940, 5041, 10224, 5184, 10512, 5329, 10804, 5476, 11100, 5625, 11400, 5776, 11704, 5929, 12012, 6084, 12324, 6241, 12640, 6400, 12960, 6561, 13284, 6724, 13612, 6889, 13944, 7056, 14280, 7225, 14620, 7396, 14964, 7569, 15312, 7744, 15664, 7921, 16020, 8100, 16380, 8281, 16744, 8464, 17112, 8649, 17484, 8836, 17860, 9025, 18240, 9216, 18624, 9409, 19012, 9604, 19404, 9801, 19800, 10000, 20200, 10201, 20604, 10404, 21012, 10609, 21424, 10816, 21840, 11025, 22260, 11236, 22684, 11449, 23112, 11664, 23544, 11881, 23980, 12100, 24420, 12321, 24864, 12544, 25312, 12769, 25764, 12996, 26220, 13225, 26680, 13456, 27144, 13689, 27612, 13924, 28084, 14161, 28560, 14400, 29040, 14641, 29524, 14884, 30012, 15129, 30504, 15376, 31000, 15625, 31500, 15876, 32004, 16129, 32512, 16384, 33024, 16641, 33540, 16900, 34060, 17161, 34584, 17424, 35112, 17689, 35644, 17956, 36180, 18225, 36720, 18496, 37264, 18769, 37812, 19044, 38364, 19321, 38920, 19600, 39480, 19881, 40044, 20164, 40612, 20449, 41184, 20736, 41760, 21025, 42340, 21316, 42924, 21609, 43512, 21904, 44104, 22201, 44700, 22500, 45300, 22801, 45904, 23104, 46512, 23409, 47124, 23716, 47740, 24025, 48360, 24336, 48984, 24649, 49612, 24964, 50244, 25281, 50880, 25600, 51520, 25921, 52164, 26244, 52812, 26569, 53464, 26896, 54120, 27225, 54780, 27556, 55444, 27889, 56112, 28224, 56784, 28561, 57460, 28900, 58140, 29241, 58824, 29584, 59512, 29929, 60204, 30276, 60900, 30625, 61600, 30976, 62304, 31329, 63012, 31684, 63724, 32041, 64440, 32400, 65160, 32761, 65884, 33124, 66612, 33489, 67344, 33856, 68080, 34225, 68820, 34596, 69564, 34969, 70312, 35344, 71064, 35721, 71820, 36100, 72580, 36481, 73344, 36864, 74112, 37249, 74884, 37636, 75660, 38025, 76440, 38416, 77224, 38809, 78012, 39204, 78804, 39601, 79600, 40000, 80400, 40401, 81204, 40804, 82012, 41209, 82824, 41616, 83640, 42025, 84460, 42436, 85284, 42849, 86112, 43264, 86944, 43681, 87780, 44100, 88620, 44521, 89464, 44944, 90312, 45369, 91164, 45796, 92020, 46225, 92880, 46656, 93744, 47089, 94612, 47524, 95484, 47961, 96360, 48400, 97240, 48841, 98124, 49284, 99012, 49729, 99904, 50176, 100800, 50625, 101700, 51076, 102604, 51529, 103512, 51984, 104424, 52441, 105340, 52900, 106260, 53361, 107184, 53824, 108112, 54289, 109044, 54756, 109980, 55225, 110920, 55696, 111864, 56169, 112812, 56644, 113764, 57121, 114720, 57600, 115680, 58081, 116644, 58564, 117612, 59049, 118584, 59536, 119560, 60025, 120540, 60516, 121524, 61009, 122512, 61504, 123504, 62001, 124500, 62500, 125500, 63001, 126504, 63504, 127512, 64009, 128524, 64516, 129540, 65025, 130560, 65536, 131584, 66049, 132612, 66564, 133644, 67081, 134680, 67600, 135720, 68121, 136764, 68644, 137812, 69169, 138864, 69696, 139920, 70225, 140980, 70756, 142044, 71289, 143112, 71824, 144184, 72361, 145260, 72900, 146340, 73441, 147424, 73984, 148512, 74529, 149604, 75076, 150700, 75625, 151800, 76176, 152904, 76729, 154012, 77284, 155124, 77841, 156240, 78400, 157360, 78961, 158484, 79524, 159612, 80089, 160744, 80656, 161880, 81225, 163020, 81796, 164164, 82369, 165312, 82944, 166464, 83521, 167620, 84100, 168780, 84681, 169944, 85264, 171112, 85849, 172284, 86436, 173460, 87025, 174640, 87616, 175824, 88209, 177012, 88804, 178204, 89401, 179400, 90000, 180600, 90601, 181804, 91204, 183012, 91809, 184224, 92416, 185440, 93025, 186660, 93636, 187884, 94249, 189112, 94864, 190344, 95481, 191580, 96100, 192820, 96721, 194064, 97344, 195312, 97969, 196564, 98596, 197820, 99225, 199080, 99856, 200344, 100489, 201612, 101124, 202884, 101761, 204160, 102400, 205440, 103041, 206724, 103684, 208012, 104329, 209304, 104976, 210600, 105625, 211900, 106276, 213204, 106929, 214512, 107584, 215824, 108241, 217140, 108900, 218460, 109561, 219784, 110224, 221112, 110889, 222444, 111556, 223780, 112225, 225120, 112896, 226464, 113569, 227812, 114244, 229164, 114921, 230520, 115600, 231880, 116281, 233244, 116964, 234612, 117649, 235984, 118336, 237360, 119025, 238740, 119716, 240124, 120409, 241512, 121104, 242904, 121801, 244300, 122500, 245700, 123201, 247104, 123904, 248512, 124609, 249924, 125316, 251340, 126025, 252760, 126736, 254184, 127449, 255612, 128164, 257044, 128881, 258480, 129600, 259920, 130321, 261364, 131044, 262812, 131769, 264264, 132496, 265720, 133225, 267180, 133956, 268644, 134689, 270112, 135424, 271584, 136161, 273060, 136900, 274540, 137641, 276024, 138384, 277512, 139129, 279004, 139876, 280500, 140625, 282000, 141376, 283504, 142129, 285012, 142884, 286524, 143641, 288040, 144400, 289560, 145161, 291084, 145924, 292612, 146689, 294144, 147456, 295680, 148225, 297220, 148996, 298764, 149769, 300312, 150544, 301864, 151321, 303420, 152100, 304980, 152881, 306544, 153664, 308112, 154449, 309684, 155236, 311260, 156025, 312840, 156816, 314424, 157609, 316012, 158404, 317604, 159201, 319200, 160000, 320800, 160801, 322404, 161604, 324012, 162409, 325624, 163216, 327240, 164025, 328860, 164836, 330484, 165649, 332112, 166464, 333744, 167281, 335380, 168100, 337020, 168921, 338664, 169744, 340312, 170569, 341964, 171396, 343620, 172225, 345280, 173056, 346944, 173889, 348612, 174724, 350284, 175561, 351960, 176400, 353640, 177241, 355324, 178084, 357012, 178929, 358704, 179776, 360400, 180625, 362100, 181476, 363804, 182329, 365512, 183184, 367224, 184041, 368940, 184900, 370660, 185761, 372384, 186624, 374112, 187489, 375844, 188356, 377580, 189225, 379320, 190096, 381064, 190969, 382812, 191844, 384564, 192721, 386320, 193600, 388080, 194481, 389844, 195364, 391612, 196249, 393384, 197136, 395160, 198025, 396940, 198916, 398724, 199809, 400512, 200704, 402304, 201601, 404100, 202500, 405900, 203401, 407704, 204304, 409512, 205209, 411324, 206116, 413140, 207025, 414960, 207936, 416784, 208849, 418612, 209764, 420444, 210681, 422280, 211600, 424120, 212521, 425964, 213444, 427812, 214369, 429664, 215296, 431520, 216225, 433380, 217156, 435244, 218089, 437112, 219024, 438984, 219961, 440860, 220900, 442740, 221841, 444624, 222784, 446512, 223729, 448404, 224676, 450300, 225625, 452200, 226576, 454104, 227529, 456012, 228484, 457924, 229441, 459840, 230400, 461760, 231361, 463684, 232324, 465612, 233289, 467544, 234256, 469480, 235225, 471420, 236196, 473364, 237169, 475312, 238144, 477264, 239121, 479220, 240100, 481180, 241081, 483144, 242064, 485112, 243049, 487084, 244036, 489060, 245025, 491040, 246016, 493024, 247009, 495012, 248004, 497004, 249001, 499000, 250000, 501000, 251001, 503004]

def solve_(k):
    # your solution here
    d4 = [(0,1), (1,0), (0,-1), (-1,0)]
    stack = set([(0,1,0), (1,0,1), (0,-1,2), (-1,0,3)])

    save = []

    for i in range(k):
        new_stack = set()
        for x,y,d in stack:
            for dd in [-1,1]:
                new_d = (d+dd) % 4
                dx,dy = d4[new_d]
                new_stack.add((x+dx, y+dy, new_d))
        stack = new_stack

        save_res = len(set((x,y) for x,y,d in stack))
        log(i, save_res)
        save.append(save_res)

    log(save)

    res = set((x,y) for x,y,d in stack)
    return len(res)


def solve(*args):
    # screen input
    if OFFLINE_TEST:
        log("----- solving ------")
        log(*args)
        log("----- ------- ------")
    return solve_(*args)


def read_matrix(rows):
    return [list(map(int,input().split())) for _ in range(rows)]

def read_strings(rows):
    return [input().strip() for _ in range(rows)]

for case_num in [1]:  # no loop over test case
# for case_num in range(int(input())):

    # read line as a string
    # strr = input().strip()

    # read one line and parse each word as a string
    # lst = input().split()

    # read line as an integer
    k = int(input())
    
    # read one line and parse each word as an integer
    # lst = list(map(int,input().split()))

    # read multiple rows
    # mrr = read_matrix(k)
    # arr = read_strings(k)

    # res = solve(k)  # please change
    
    # print result
    # Google - case number required
    # print("Case #{}: {}".format(case_num+1, res))

    # Other platforms - no case number required
    print(RESULT[k-1])
    # print(len(res))  # if printing length of list
    # print(*res)  # if printing a list